{
  "openapi": "3.0.0",
  "info": {
    "title": "My Express API",
    "version": "1.0.0",
    "description": "Documentation for my Express API"
  },
  "servers": [
    {
      "url": "http://localhost:3000"
    }
  ],
  "paths": {
    "/auth/register": {
      "post": {
        "summary": "registers a new user",
        "tags": [
          "Auth"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The new user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          }
        }
      }
    },
    "/auth/login": {
      "post": {
        "summary": "User login",
        "description": "Authenticates a user and returns JWT tokens",
        "tags": [
          "Auth"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful login",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "accessToken": {
                      "type": "string",
                      "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                    },
                    "refreshToken": {
                      "type": "string",
                      "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                    },
                    "_id": {
                      "type": "string",
                      "example": "60d0fe4f5311236168a109ca"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input or wrong email or password"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/auth/logout": {
      "post": {
        "summary": "User logout",
        "description": "Logs out a user by invalidating the refresh token",
        "tags": [
          "Auth"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "refreshToken": {
                    "type": "string",
                    "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                  },
                  "provider": {
                    "type": "string",
                    "example": "Local"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful logout"
          },
          "400": {
            "description": "Invalid refresh token"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/auth/refresh": {
      "post": {
        "summary": "Refresh JWT tokens",
        "description": "Refreshes the access token using the refresh token",
        "tags": [
          "Auth"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "refreshToken": {
                    "type": "string",
                    "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Tokens refreshed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "accessToken": {
                      "type": "string",
                      "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                    },
                    "refreshToken": {
                      "type": "string",
                      "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid refresh token"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/auth/oauth-register": {
      "post": {
        "summary": "Register a new user via OAuth Google",
        "tags": [
          "Auth"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "credential": {
                    "type": "string",
                    "example": null
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully registered",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "User registered successfully"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Invalid OAuth credential"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "An error occurred while registering the user via OAuth"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/auth/oauth-login": {
      "post": {
        "summary": "Login a user via OAuth Google",
        "tags": [
          "Auth"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "crednitail": {
                    "type": "string",
                    "example": null
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully logged in",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Login successful"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Invalid OAuth crednitail"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "An error occurred while logging in the user via OAuth"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/auth/getProfile": {
      "get": {
        "summary": "Get profile",
        "tags": [
          "Auth"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "provider",
            "schema": {
              "$ref": "#/components/schemas/providerSchema"
            },
            "required": true,
            "example": "Local"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved profile",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDB"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/auth/setAvatar": {
      "post": {
        "summary": "Upload image and set new Avatar",
        "tags": [
          "Auth"
        ],
        "parameters": [
          {
            "name": "provider",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/providerSchema",
              "example": "Local"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "image": {
                    "type": "string",
                    "format": "binary",
                    "description": "The image file to set as the new avatar"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully set the new avatar",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Avatar set successfully"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request, possibly missing the required fields",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Missing image or invalid provider"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "An error occurred while processing the avatar upload"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/auth/editProfile": {
      "post": {
        "summary": "Edit name and avatar properties",
        "tags": [
          "Auth"
        ],
        "parameters": [
          {
            "name": "provider",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/providerSchema",
              "example": "Local"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Updated name for user"
                  },
                  "avatar": {
                    "type": "string",
                    "description": "URL for avatar image"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully set properties for user",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "example": "Avatar and name set successfully"
                    },
                    "email": {
                      "type": "string"
                    },
                    "avatar": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request, possibly missing the required fields",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Missing property or invalid provider"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "An error occurred while processing the avatar upload"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/comments": {
      "get": {
        "summary": "Retrieve a list of comments",
        "tags": [
          "Comments"
        ],
        "responses": {
          "200": {
            "description": "A list of comments",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Comment"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a new comment",
        "description": "Creates a new comment",
        "tags": [
          "Comments"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Comment"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The created comment",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Comment"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/comments/{id}": {
      "get": {
        "summary": "Retrieve a single comment by ID",
        "tags": [
          "Comments"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The comment ID"
          }
        ],
        "responses": {
          "200": {
            "description": "A single comment",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Comment"
                }
              }
            }
          },
          "404": {
            "description": "Comment not found"
          }
        }
      },
      "delete": {
        "summary": "Delete a comment by ID",
        "tags": [
          "Comments"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The comment ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Comment deleted"
          },
          "404": {
            "description": "Comment not found"
          }
        }
      }
    },
    "/posts": {
      "get": {
        "summary": "Get all posts",
        "description": "Retrieves a list of all posts",
        "tags": [
          "Posts"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "owner",
            "type": "string",
            "required": false,
            "example": "Local"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of posts",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Post"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "post": {
        "summary": "Create a new post",
        "description": "Creates a new post",
        "tags": [
          "Posts"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Post"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The created post",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Post"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/posts/{id}": {
      "get": {
        "summary": "Get a post by ID",
        "description": "Retrieves a post by its ID",
        "tags": [
          "Posts"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The post ID"
          }
        ],
        "responses": {
          "200": {
            "description": "A single post",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Post"
                }
              }
            }
          },
          "404": {
            "description": "Post not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "delete": {
        "summary": "Delete a post by ID",
        "description": "Deletes a post by its ID",
        "tags": [
          "Posts"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The post ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Post deleted successfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Post not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    },
    "schemas": {
      "User": {
        "type": "object",
        "required": [
          "email",
          "password"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "The user name"
          },
          "email": {
            "type": "string",
            "description": "The user email"
          },
          "password": {
            "type": "string",
            "description": "The user password"
          }
        },
        "example": {
          "name": "Alice",
          "email": "alice@gmail.com",
          "password": "123456"
        }
      },
      "UserDB": {
        "type": "object",
        "required": [
          "name",
          "email",
          "avatar",
          "refreshToken"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "The user name"
          },
          "email": {
            "type": "string",
            "description": "The user email"
          },
          "avatar": {
            "type": "string",
            "description": "The user picture, can be url or path in server"
          },
          "refreshToken": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of refreshTokens"
          }
        },
        "example": {
          "name": "Alice",
          "email": "alice@gmail.com",
          "avatar": "https://www.google.com",
          "refreshToken": [
            "asd",
            "qwer"
          ]
        }
      },
      "providerSchema": {
        "type": "string",
        "enum": [
          "Local",
          "Google"
        ],
        "description": "The provider schema"
      },
      "Comment": {
        "type": "object",
        "required": [
          "title",
          "content"
        ],
        "properties": {
          "postId": {
            "type": "string",
            "example": "60d0fe4f5311236168a109ca"
          },
          "comment": {
            "type": "string",
            "example": "This is the content of the comment."
          }
        }
      },
      "Post": {
        "type": "object",
        "required": [
          "title",
          "content"
        ],
        "properties": {
          "title": {
            "type": "string",
            "example": "My First Post"
          },
          "content": {
            "type": "string",
            "example": "This is the content of the post."
          }
        }
      }
    }
  },
  "tags": [
    {
      "name": "Auth",
      "description": "The Authentication API"
    },
    {
      "name": "Comments",
      "description": "The Comments managing API"
    },
    {
      "name": "Posts",
      "description": "The Posts managing API"
    }
  ]
}